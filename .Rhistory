linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_adv))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
summary(linear_fwd)
frm
summary(logistic_fwd)
formula(logistic_fwd)
summary(linear_fwd)
merged_train_linear <- filter(merged_train_adv, logtarg>0)
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear2 <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_linear, method = "lm", trControl = tctrl)
linear2
linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_linear))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
summary(linear_fwd)
formula(linear_step_refined)
summary(linear_fwd)
summary(linear_step_refined)
summary(linear_fwd_cv)
test_adv <- read.csv("test_adv.csv")
names(test_adv)
?makeResampleDesc
pred_linear <- predict(linear_fwd_cv, test_adv)
head(pred_linear)
length(pred_linear)
pred_logistic <- predict(logistic_fwd, test_adv)
head(pred_logistic)
pred_logistic <- predict(logistic_fwd, test_adv, type = "response")
head(pred_logistic)
pred_linear2 <- predict(linear2_fwd_cv, test_adv)
set.seed(2018-01-20)
linear2_fwd_cv <- train(formula(linear_step_refined), data = merged_train_adv, method = "lm", trControl = tctrl)
linear2_fwd_cv
set.seed(2018-01-20)
linear2_fwd_cv <- train(formula(linear_step_refined), data = merged_train_linear, method = "lm", trControl = tctrl)
linear2_fwd_cv
linear2_fwd_cv <- train(formula(linear_step_refined), data = merged_train_linear,
method = "lm", trControl = tctrl)
formula(linear_step_refined)
linear2_fwd_cv <- train(formula(linear_step_refined), data = merged_train_linear,
method = "lm", trControl = tctrl)
linear_fwd_cv <- train(formula(linear_step_refined), data = merged_train_adv, method = "lm", trControl = tctrl)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
library(glmnet)
# Chunk 3
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
merged_train_adv <- read.csv("merged_train_adv.csv")
test_adv <- read.csv("test_adv.csv")
merged_train_adv <- merged_train_adv[,-1]
head(merged_train_adv)
# Chunk 4
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
linear
# Chunk 5
all_mat <- model.matrix(logtarg ~ (.-id)^2-1, data = merged_train_adv)
linear_lasso <- cv.glmnet(all_mat, merged_train_adv$logtarg, alpha=1,
nfold=10, lambda=seq(0,10,0.01))
lambdalasso <- lassocv$lambda.min
print(lambdalasso)
plot(lassocv)
small.lambda.index <- which(lassocv$lambda == lassocv$lambda.min)
small.lambda.betas <- coef(lassocv$glmnet.fit)[,small.lambda.index]
print(small.lambda.betas)
plot(lassofit,xvar="lambda",label=TRUE, main="Coeffs of Lasso Regression", type="l", xlab=expression("log_lambda"), ylab="Coeff")
abline(h=0);
abline(v=log(lassocv$lambda.min))
names(which(small.lambda.betas==0))
# Chunk 6
linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_adv))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
library(glmnet)
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
merged_train_adv <- read.csv("merged_train_adv.csv")
test_adv <- read.csv("test_adv.csv")
merged_train_adv <- merged_train_adv[,-1]
head(merged_train_adv)
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
linear
?makeLearner
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
linear
all_mat <- model.matrix(logtarg ~ (.-id)^2-1, data = merged_train_adv)
linear_lasso <- cv.glmnet(all_mat, merged_train_adv$logtarg, alpha=1,
nfold=10, lambda=seq(0,10,0.01))
lambdalasso <- lassocv$lambda.min
print(lambdalasso)
plot(lassocv)
small.lambda.index <- which(lassocv$lambda == lassocv$lambda.min)
small.lambda.betas <- coef(lassocv$glmnet.fit)[,small.lambda.index]
print(small.lambda.betas)
plot(lassofit,xvar="lambda",label=TRUE, main="Coeffs of Lasso Regression", type="l", xlab=expression("log_lambda"), ylab="Coeff")
abline(h=0);
abline(v=log(lassocv$lambda.min))
names(which(small.lambda.betas==0))
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
library(glmnet)
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
merged_train_adv <- read.csv("merged_train_adv.csv")
test_adv <- read.csv("test_adv.csv")
merged_train_adv <- merged_train_adv[,-1]
head(merged_train_adv)
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
linear
linear <- train(as.formula(logtarg ~ .-id-tot_price-tot_qty), data = merged_train_adv, method = "lm", trControl = tctrl)
names(merged_train_adv)
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
merged_train_adv <- read.csv("merged_train_adv.csv")
test_adv <- read.csv("test_adv.csv")
head(merged_train_adv)
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
linear
all_mat <- model.matrix(logtarg ~ (.-id)^2-1, data = merged_train_adv)
linear_lasso <- cv.glmnet(all_mat, merged_train_adv$logtarg, alpha=1,
nfold=10, lambda=seq(0,10,0.01))
lambdalasso <- lassocv$lambda.min
print(lambdalasso)
plot(lassocv)
small.lambda.index <- which(lassocv$lambda == lassocv$lambda.min)
small.lambda.betas <- coef(lassocv$glmnet.fit)[,small.lambda.index]
print(small.lambda.betas)
plot(lassofit,xvar="lambda",label=TRUE, main="Coeffs of Lasso Regression", type="l", xlab=expression("log_lambda"), ylab="Coeff")
abline(h=0);
abline(v=log(lassocv$lambda.min))
names(which(small.lambda.betas==0))
# Chunk 6
linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_adv))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
# Chunk 7
# removing activity and creating the new formula to pass to the model
frm <- as.formula(paste0(Reduce(paste0, deparse(formula(linear_fwd))), " - activity - slstyr - last_pur - ordlyr"))
linear_step_refined <- step(lm(frm, data = merged_train_adv), direction = "both")
summary(linear_step_refined)
# Chunk 8
set.seed(2018-01-20)
linear_fwd_cv <- train(formula(linear_step_refined), data = merged_train_adv, method = "lm", trControl = tctrl)
linear_fwd_cv
# Chunk 9
set.seed(2018-01-20)
merged_train_logistic <- mutate(merged_train_adv,
responded = as.factor(ifelse(logtarg>0, 1, 0))) %>%
select(-logtarg)
levels(merged_train_logistic$responded) <- c("no", "yes")
tctrl_logistic <- trainControl(method = "cv", number = 10, classProbs = TRUE,
summaryFunction = twoClassSummary)
logistic <- train(responded ~ .-id-tot_price-tot_qty, data = merged_train_logistic,
method = "glm", family = binomial, trControl = tctrl_logistic,
metric = "ROC", maximize = TRUE)
logistic
# Chunk 10
logistic_base <- glm(responded ~ 1, data = merged_train_logistic, family = binomial)
biggest_logistic <- formula(glm(responded ~ (.-id)^2,
data = merged_train_logistic, family = binomial))
logistic_fwd <- step(logistic_base, direction = "both", scope = biggest_logistic)
summary(logistic_fwd)
# Chunk 11
set.seed(2018-01-20)
logistic_fwd_cv <- train(formula(logistic_fwd), data = merged_train_logistic,
method = "glm", family = binomial, trControl = tctrl_logistic,
metric = "ROC", maximize = TRUE)
logistic_fwd_cv
# Chunk 12
merged_train_linear <- filter(merged_train_adv, logtarg>0)
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear2 <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_linear, method = "lm", trControl = tctrl)
linear2
# Chunk 13
linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_linear))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
summary(linear_fwd)
# Chunk 14
set.seed(2018-01-20)
linear2_fwd_cv <- train(formula(linear_step_refined), data = merged_train_linear,
method = "lm", trControl = tctrl)
linear2_fwd_cv
# Chunk 15
pred_linear <- predict(linear_fwd_cv, test_adv)
write.csv(data.frame(id = test_adv$id, yhat = pred_linear),
"only_linear_regression.csv")
# Chunk 16
pred_logistic <- predict(logistic_fwd, test_adv, type = "response")
pred_linear2 <- predict(linear2_fwd_cv, test_adv)
write.csv(data.frame(id = test_adv$id, yhat = pred_logistic * pred_linear2),
"linear_plus_logistic.csv")
summary(pred_linear2)
summary(ifelse(pred_linear2>20, 20, pred_linear2))
pred_logistic <- predict(logistic_fwd, test_adv, type = "response")
pred_linear2 <- predict(linear2_fwd_cv, test_adv)
# imposing a hard threshold on the linear model
pred_linear2 <- ifelse(pred_linear2>20, 20, pred_linear2)
pred_linear2 <- ifelse(pred_linear2<0, 0, pred_linear2)
write.csv(data.frame(id = test_adv$id, yhat = pred_logistic * pred_linear2),
"linear_plus_logistic.csv", row.names = FALSE)
summary(pred_linear2)
head(orders)
library(dplyr)
orders %>% filter(category == '99')
orders %>% filter(category != '99')
orders %>% filter(category != '99') %>% filter(price == 0)
orders %>% filter(category == '99') %>% filter(price == 0)
orders %>% filter(category != '99') %>% filter(price != 0)
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
orders <- read.csv("orders.csv")
orders <- orders %>% filter(category != '99') %>% filter(price != 0)
booktrain <- read.csv("booktrain.csv")
dim(orders)
dim(read.csv("orders.csv"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
orders <- read.csv("orders.csv")
orders <- orders %>% filter(category != '99') %>% filter(price != 0)
booktrain <- read.csv("booktrain.csv")
# Chunk 3
dim(orders)
head(orders)
str(orders)
# Chunk 4
dim(booktrain)
head(booktrain)
str(booktrain)
# Chunk 5
orders <- mutate(orders, orddate = dmy(orddate), category = factor(category))
# Chunk 6
length(orders$id)
length(unique(orders$id))
length(booktrain$id)
length(unique(booktrain$id))
# Chunk 7
train <- filter(orders, id %in% booktrain$id)
test <- filter(orders, !(id %in% booktrain$id))
# Chunk 8
length(unique(train$id))
length(unique(test$id))
# Chunk 9
qplot(data = booktrain, x = logtarg)
# Chunk 10
length(which(booktrain$logtarg>0))
# Chunk 11
group_by(orders, id) %>% summarise(n = n_distinct(ordnum)) %>% arrange(desc(n))
# Chunk 12
naive_df_train <- group_by(train, id) %>%
summarise(tot_price = sum(price), tot_qty = sum(qty))
merged_train_naive = merge(naive_df_train, booktrain, by = 'id')
naive_df_test <- group_by(test, id) %>%
summarise(tot_price = sum(price), tot_qty = sum(qty))
# Chunk 13
naive_fit <- lm(logtarg ~ . -id, data = merged_train_naive)
summary(naive_fit)
# Chunk 14
pred <- predict(naive_fit, newdata = naive_df_test)
predictions <- data.frame(id = naive_df_test$id, yhat = pred)
write.csv(predictions, file = 'naive.csv', row.names = FALSE)
# Chunk 15
# removing zero priced purchases
# orders <- filter(orders, price != 0)
# Chunk 16
this_year <- 2014
last_year <- 2013
ago2_year <- 2012
slstyr_df <- orders %>%
group_by(id) %>%
summarise(slstyr = sum(ifelse(year(orddate)==this_year, price*qty, 0)))
ordtyr_df <- orders %>%
group_by(id) %>%
summarise(ordtyr = sum(ifelse(year(orddate)==this_year, qty, 0)))
slslyr_df <- orders %>%
group_by(id) %>%
summarise(slslyr = sum(ifelse(year(orddate)==last_year, price*qty, 0)))
ordlyr_df <- orders %>%
group_by(id) %>%
summarise(ordlyr = sum(ifelse(year(orddate)==last_year, qty, 0)))
sls2ago_df <- orders %>%
group_by(id) %>%
summarise(sls2ago = sum(ifelse(year(orddate)==ago2_year, price*qty, 0)))
ord2ago_df <- orders %>%
group_by(id) %>%
summarise(ord2ago = sum(ifelse(year(orddate)==ago2_year, qty, 0)))
slsbfr_df <- orders %>%
group_by(id) %>%
summarise(slsbfr = sum(ifelse(year(orddate)<ago2_year, price*qty, 0)))
ordbfr_df <- orders %>%
group_by(id) %>%
summarise(ordbfr = sum(ifelse(year(orddate)<ago2_year, qty, 0)))
# Chunk 17
# cat99_df <- orders %>%
#     group_by(id) %>%
#     summarise(cat99 = as.integer('99' %in% category))
# Chunk 18
# total number of orders per id
tot_orders_df <- group_by(orders, id) %>% summarise(tot_orders =
n_distinct(ordnum))
# number of items purchased per order
avg_items_df <- group_by(orders, id) %>% summarise(avg_items = sum(qty)) %>%
mutate(avg_items = avg_items/tot_orders_df$tot_orders)
# average price per order
avg_price_df <- group_by(orders, id) %>% summarise(avg_price = sum(price*qty)) %>%
mutate(avg_price = avg_price/tot_orders_df$tot_orders)
# total number of categories purchased
tot_cat_df <- group_by(orders, id) %>% summarise(tot_cat = n_distinct(category))
# Chunk 19
# first purchase date
first_pur_df = group_by(orders, id) %>% summarise(first_pur = min(orddate))
# last purchase date
last_pur_df = group_by(orders, id) %>% summarise(last_pur = max(orddate))
# total price of last purchase date
last_tot_price_df = group_by(orders, id, orddate) %>%
summarise(last_tot_price = sum(price*qty)) %>%
group_by(id) %>%
filter(orddate == max(orddate)) %>%
select(id, last_tot_price)
# Chunk 20
# merging all features into temp df
temp_df <- Reduce(function(x, y) merge(x, y, by = "id"), list(tot_orders_df, avg_items_df, avg_price_df, tot_cat_df, first_pur_df, last_pur_df, last_tot_price_df, slstyr_df, slslyr_df, sls2ago_df, slsbfr_df, ordtyr_df, ordlyr_df, ord2ago_df, ordbfr_df, cat99_df))
# creating the following features
# 1. the average time between orders
# 2. activity defined as (lifetime - recency)/lifetime, which is the proportion of lifetime a customer was active
# 3. last order weighted by price
temp_df <- temp_df %>%
mutate(pur_time_avg = as.integer(last_pur - first_pur)/tot_orders) %>%
mutate(activity = as.integer(last_pur - first_pur)/
as.integer(as.Date("2014-08-01") - first_pur)) %>%
mutate(last_ord_wt = as.integer(as.Date("2014-08-01") - last_pur)*
last_tot_price)
# removing last_tot_price now that we have created last_ord_wt
temp_df <- select(temp_df, -last_tot_price)
temp_df <- mutate(temp_df, last_pur = as.integer(last_pur),
first_pur = as.integer(first_pur))
# Chunk 21
naive_features <- group_by(orders, id) %>%
summarise(tot_price = sum(price*qty), tot_qty = sum(qty))
temp_df <- merge(temp_df, naive_features, by = 'id')
# Chunk 22
train_adv <- filter(temp_df, id %in% booktrain$id)
test_adv <- filter(temp_df, !(id %in% booktrain$id))
merged_train_adv <- merge(train_adv, booktrain, by = 'id')
write.csv(merged_train_adv, "merged_train_adv_no99.csv", row.names = FALSE)
write.csv(test_adv, "test_adv_no99.csv", row.names = FALSE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
library(glmnet)
# Chunk 3
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
merged_train_adv <- read.csv("merged_train_adv_no99.csv")
test_adv <- read.csv("test_adv_no99.csv")
head(merged_train_adv)
# Chunk 4
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_adv, method = "lm", trControl = tctrl)
linear
# Chunk 5
all_mat <- model.matrix(logtarg ~ (.-id)^2-1, data = merged_train_adv)
linear_lasso <- cv.glmnet(all_mat, merged_train_adv$logtarg, alpha=1,
nfold=10, lambda=seq(0,10,0.01))
lambdalasso <- lassocv$lambda.min
print(lambdalasso)
plot(lassocv)
small.lambda.index <- which(lassocv$lambda == lassocv$lambda.min)
small.lambda.betas <- coef(lassocv$glmnet.fit)[,small.lambda.index]
print(small.lambda.betas)
plot(lassofit,xvar="lambda",label=TRUE, main="Coeffs of Lasso Regression", type="l", xlab=expression("log_lambda"), ylab="Coeff")
abline(h=0);
abline(v=log(lassocv$lambda.min))
names(which(small.lambda.betas==0))
# Chunk 6
linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_adv))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
# Chunk 7
# removing activity and creating the new formula to pass to the model
frm <- as.formula(paste0(Reduce(paste0, deparse(formula(linear_fwd))), " - activity - slstyr - last_pur - ordlyr"))
linear_step_refined <- step(lm(frm, data = merged_train_adv), direction = "both")
summary(linear_step_refined)
# Chunk 8
set.seed(2018-01-20)
linear_fwd_cv <- train(formula(linear_step_refined), data = merged_train_adv, method = "lm", trControl = tctrl)
linear_fwd_cv
# Chunk 9
set.seed(2018-01-20)
merged_train_logistic <- mutate(merged_train_adv,
responded = as.factor(ifelse(logtarg>0, 1, 0))) %>%
select(-logtarg)
levels(merged_train_logistic$responded) <- c("no", "yes")
tctrl_logistic <- trainControl(method = "cv", number = 10, classProbs = TRUE,
summaryFunction = twoClassSummary)
logistic <- train(responded ~ .-id-tot_price-tot_qty, data = merged_train_logistic,
method = "glm", family = binomial, trControl = tctrl_logistic,
metric = "ROC", maximize = TRUE)
logistic
# Chunk 10
logistic_base <- glm(responded ~ 1, data = merged_train_logistic, family = binomial)
biggest_logistic <- formula(glm(responded ~ (.-id)^2,
data = merged_train_logistic, family = binomial))
logistic_fwd <- step(logistic_base, direction = "both", scope = biggest_logistic)
summary(logistic_fwd)
# Chunk 11
set.seed(2018-01-20)
logistic_fwd_cv <- train(formula(logistic_fwd), data = merged_train_logistic,
method = "glm", family = binomial, trControl = tctrl_logistic,
metric = "ROC", maximize = TRUE)
logistic_fwd_cv
# Chunk 12
merged_train_linear <- filter(merged_train_adv, logtarg>0)
set.seed(2018-01-20)
tctrl <- trainControl(method = "cv", number = 10)
linear2 <- train(logtarg ~ .-id-tot_price-tot_qty, data = merged_train_linear, method = "lm", trControl = tctrl)
linear2
# Chunk 13
linear_base <- lm(logtarg ~ 1, data = merged_train_adv)
biggest <- formula(lm(logtarg ~ (.-id)^2, data = merged_train_linear))
linear_fwd <- step(linear_base, direction = "both", scope = biggest)
summary(linear_fwd)
# Chunk 14
set.seed(2018-01-20)
linear2_fwd_cv <- train(formula(linear_step_refined), data = merged_train_linear,
method = "lm", trControl = tctrl)
linear2_fwd_cv
# Chunk 15
pred_linear <- predict(linear_fwd_cv, test_adv)
write.csv(data.frame(id = test_adv$id, yhat = pred_linear),
"only_linear_regression.csv", row.names = FALSE)
# Chunk 16
pred_logistic <- predict(logistic_fwd, test_adv, type = "response")
pred_linear2 <- predict(linear2_fwd_cv, test_adv)
# imposing a hard threshold on the linear model
pred_linear2 <- ifelse(pred_linear2>20, 20, pred_linear2)
pred_linear2 <- ifelse(pred_linear2<0, 0, pred_linear2)
write.csv(data.frame(id = test_adv$id, yhat = pred_logistic * pred_linear2),
"linear_plus_logistic_thresh.csv", row.names = FALSE)
write.csv(data.frame(id = test_adv$id, yhat = pred_logistic * pred_linear2),
"linear_plus_logistic_thresh_no99.csv", row.names = FALSE)
no99 <- data.frame(id = test_adv$id, yhat = pred_logistic * pred_linear2)
dim(no99)
length(unique(test_adv$id))
orders <- read.csv("orders.csv")
orders2 <- orders %>% filter(category != '99') %>% filter(price != 0)
write.csv(orders2, "orders2.csv", row.names = FALSE)
length(unique(orders$id))
length(unique(orders$id))
length(unique(orders$id[orders$id %in% booktrain$id]))
length(unique(orders$id[!orders$id %in% booktrain$id]))
test_ids <- unique(orders$id[!orders$id %in% booktrain$id])
dim(no99)
length(unique(no99$id[no99$id %in% test_ids]))
length(unique(no99$id[test_ids %in% no99$id]))
length(unique(no99$id[!test_ids %in% no99$id]))
length(unique(test_ids$id[!test_ids %in% no99$id]))
length(unique(test_ids[!test_ids %in% no99$id]))
add_ids <- unique(test_ids[!test_ids %in% no99$id])
data.frame(id = add_ids, yhat = 0)
dim(rbind(no99, data.frame(id = add_ids, yhat = 0)))
no99 <- rbind(no99, data.frame(id = add_ids, yhat = 0))
write.csv(no99, "no99.csv")
