library(RANN)
library(reshape2)
library(glmnet)
training <- read.csv("train.csv", na.strings = c("", " "))
dim(training)
zip <- read.csv("zipCodeMarketingCosts.csv")
dim(zip)
# tr <- training
y=x
x=seq(-pi ,pi ,length =50)
y=x
f=outer(x,y,function (x,y)cos(y)/(1+x^2))
outer(x,y,function (x,y)cos(y)/(1+x^2))
length(x)
contour (x,y,f)
plot(x,y,f)
plot3d(x,y,f)
splot(x,y,f)
surf(x,y,f)
surfplot(x,y,f)
contour (x,y,f,nlevels =45, add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,f)
persp(x,y,fa ,theta =30, phi =40)
install.packages("ISLR")
Auto=read.table ("Auto.data ")
library(ISLR)
head(Auto)
fix(Auto)
plot(cylinders , mpg , col ="red", varwidth =T,horizontal =T)
attach(Auto)
plot(cylinders , mpg , col ="red", varwidth =T,horizontal =T)
pairs(Auto)
pairs(∼ mpg + displacement + horsepower + weight +
acceleration ,
Auto)
plot(horsepower ,mpg)
identify (horsepower ,mpg ,name)
gl(n = 3, k = 20, labels = c("control", "low", "high"))
f <- gl(n = 3, k = 20, labels = c("control", "low", "high
))
f <- gl(n = 3, k = 20, labels = c("control", "low", "high"))
mat <- model.matrix(~f, data = data.frame(f = f))
mat
paste(1:19)
paste(1:19)==as.character(1:19)
list(NULL,paste(1:19))
?matrix
library(splines)
?bs
require(stats); require(graphics)
women$height
plot(women$height)
bs(women$height, df = 5)
class(bs(women$height, df = 5))
bs(women$height, df = 5)$matrix
b<-bs(women$height, df = 5)
b[1]
b[[1]]
b
b[1,1]
b[2,1]
matlines(b)
lines(women)
lines(women$height)
matlines(b)
matlines(b, add=TRUE)
?matliens
?matlines
plot(b[,1])
plot(b[,2])
plot(b[,3])
plot(b[,4])
plot(b[,5])
b<-ns(women$height, df = 5)
plot(b[,5])
plot(b[,1])
plot(b[,2])
plot(b[,3])
plot(b[,4])
plot(b[,5])
plot(b[,1], type = 'l', lwd = 2, col = "blue")
plot(b[,2], type = 'l', lwd = 2, col = "blue")
plot(b[,3], type = 'l', lwd = 2, col = "blue")
plot(b[,4], type = 'l', lwd = 2, col = "blue")
plot(b[,5], type = 'l', lwd = 2, col = "blue")
?ns
?bs
curve(function(x) 1 + x + -2 * (x-1)^2 * I(x>1), from = -2, to = 2)
curve(1 + x + -2 * (x-1)^2 * I(x>1), from = -2, to = 2)
f = function(x) (1-1/x)^x
curve(f)
curve(f, from = 0,1)
curve(f, from = 0, t0 =1)
curve(f, from = 0, to =1)
curve(f, from = 10^-100, t0 =1)
curve(f, from = 0.1, t0 =1)
warnings()
curve(f, from = 0.1, to =1)
curve(f, from = 0.1, to = f(0)1)
f(0.1)
f
f(1)
f(2)
f(20)
f(200)
f(2000)
f = function(x) 1-(1-1/x)^x
f(2000)
curve(f, from = 1, to = 100)
curve(f, from = 1, to = 1000)
curve(f, from = 100, to = 1000)
curve(f, from = 100, to = 10000)
curve(f, from = 1000, to = 10000)
abline(h = f(10^10))
f(10^10)
curve(f, from = 10^8, to = 10^9)
abline(h = f(10^10))
curve(f, from = 10^8, to = 10^10)
curve(f, from = 1000, to = 10000)
curve(f, from = 1000, to = 10^8)
curve(f, from = 10^3, to = 10^8)
curve(f, from = 10^5, to = 10^8)
curve(f, from = 10^6, to = 10^8)
curve(f, from = 10^7, to = 10^8)
abline(h = f(10^10))
abline(h = 0.6321206)
abline(v = 0.6321206)
abline(h = 0.6321206, add = T)
library(randomForest)
?randomForest
2
x <- rnorm(100)
y <- rnorm(100) + 3*x
plot(x,y)
plot(y,x)
plot()
plot(x,y,pch=20)
plot(x,y,pch=20, col="blue")
points(y,x,pch=20, col="blue")
plot(x,y,pch=20, col="blue")
points(y,x,pch=20, col="red")
plot(x,y,pch=20, col="blue")
abline(lm(y~x), col = "blue")
a = lm(y~x)
summary(b)
b = lm(x~y)
abline(b, col="red")
coef(a)
?abline
coef(a)[1]
abline(coef(a)[1]/coef(a)[2], 1/coef(a)[2], col = "green")
update.packages(ask = FALSE)
update.packages(ask = FALSE)
install.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
require()devtools
require(devtools)
x <- require(devtools)
x
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
data(tooth)
ToothGrowth
?ToothGrowth
library(datasets)
head(ToothGrowth)
data("AirPassengers")
head(AirPassengers)
str(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
AirPassengers
?aggregate
plot(aggregate(AirPassengers,FUN=mean))
aggregate(AirPassengers,FUN=mean)
lass(aggregate(AirPassengers,FUN=mean))
class(aggregate(AirPassengers,FUN=mean))
t<-aggregate(AirPassengers,FUN=mean)
t
t
t$
f
t[1]
t[1:12]
t[1:13]
t[1:12]
class(t[1:12])
class(t)
points(t[1:12])
time(t)
t
AirPassengers
class(AirPassengers)
points(time(t),t[1:12])
points(time(t),t)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
points(time(t),t[1:12], pch = 12, col = "blue")
points(time(t),t[1:12], pch = 20, col = "blue")
lines(time(t),t[1:12], pch = 20, col = "blue")
lines(time(t),t[1:12])
lines(time(t),t[1:12]col = "blue")
lines(time(t),t[1:12], col = "blue")
plot(time(t),t[1:12], col = "blue")
plot(time(t)[1:12],t[1:12], col = "blue")
plot(time(t)[1:12],t[1:12], pch=20, type = 'b', col = "blue")
plot(time(t)[1:12],t[1:12], pch=20, type = 'b', col = "blue", add = T)
lines(time(t)[1:12],t[1:12], pch=20, type = 'b', col = "blue")
lines(time(t)[1:12],t[1:12], col = "blue")
lines(time(t)[1:12],t[1:12], col = "blue", add = T)
plot(AirPassengers)
lines(time(t)[1:12],t[1:12], col = "blue", add = T)
lines(time(t)[1:12],t[1:12], col = "blue")
abline(reg=lm(AirPassengers~time(AirPassengers)))
AirPassengers
AirPassengers
AirPassengers
plot(AirPassengers)
lag(AirPassengers)
AirPassengers - lag(AirPassengers)
plot(AirPassengers - lag(AirPassengers))
t <- AirPassengers - lag(AirPassengers)
t
aggregate(t, FUN = mean)
plot(aggregate(t, FUN = mean))
plot(AirPassengers - lag(AirPassengers))
lines(aggregate(t, FUN = mean))
adf(AirPassengers)
adf.test(AirPassengers)
adf.test
install.packages("aTSA")
library(aTSA)
adf.test(AirPassengers)
?diff
diff(c(1,2,3,4,5))
diff(c(1,2,9,4,5))
plot(c(1,2,3,4,5))
plot(diff(c(1,2,9,4,5)))
plot(c(1,2,9,4,5))
?adf.text
?adf.test
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)))
plot(diff(log(AirPassengers)))
plot(diff(AirPassengers))
plot(log(AirPassengers))
plot(diff(log(AirPassengers)))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
summary(fit)
pred <- predict(fit, n.ahead = 10*12)
pred
install.packages(“fUnitRoots”)
install.packages("fUnitRoots")
library(fUnitRoots);
adfTest(AirPassengers)
adfTest(diff(AirPassengers));
?ets
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=4, start=c(1946,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=3, start=c(1946,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=10, start=c(1946,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=2, start=c(1946,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=20, start=c(1946,1))
birthstimeseries
?ts
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=20, start=c(12,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=4, start=c(12,1))
birthstimeseries
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseries
plot.ts(kingstimeseries)
plot.ts(birthstimeseries)
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kingstimeseries <- ts(kings)
kingstimeseries
plot.ts(kingstimeseries)
plot.ts(birthstimeseries)
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
souvenirtimeseries
plot.ts(plot.ts(birthstimeseries))
plot.ts(souvenirtimeseries)
plot(souvenirtimeseries)
plot(log(souvenirtimeseries))
plot.ts(kingstimeseries)
plot.ts(birthstimeseries)
plot.ts(diff(birthstimeseries))
plot(diff(log(souvenirtimeseries)))
install.packages("TTR")
library(TTR)
adf.test(kingstimeseries)
install.packages("devtools")
version
?install.packages
install.packages('devtools', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(tidyvrse)
library(tidyverse)
curve(dnorm)
curve(dnorm, from=-4.5, to = 4.5)
library(ggplot2)
ggplot(data.frame(x=c(0, 10)), aes(x)) + stat_function(fun=sin)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
layer(geom = "area", mapping = aes(x = ifelse(x>-1.2 & x<1.1 , x, 0)),
geom_params = list(fill = "red", alpha = 0.5))
?layer
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
layer(geom = "area", mapping = aes(x = ifelse(x>-1.2 & x<1.1 , x, 0)),
params = list(fill = "red", alpha = 0.5))
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
layer(geom = "area", mapping = aes(x = ifelse(x>-1.2 & x<1.1 , x, 0)),
params = list(fill = "red", alpha = 0.5)) +
scale_y_continuous(limits = c(0, max(dat$y)))
ggplot(NULL, aes(c(-2,2))) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, 0)) +
geom_area(stat = "function", fun = dnorm, fill = "blue", xlim = c(0, 2))
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1))
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.5)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.75) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, -1), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-3, -2), alpha = 0.25) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(1, 2), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(2, 3), alpha = 0.25)
?stat_function
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.75) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, -1), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-3, -2), alpha = 0.25) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(1, 2), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(2, 3), alpha = 0.25) +
geom_line(size=1)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x), size = 1) + stat_function(fun=dnorm) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.75) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, -1), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-3, -2), alpha = 0.25) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(1, 2), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(2, 3), alpha = 0.25)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x), size = 2) + stat_function(fun=dnorm) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.75) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, -1), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-3, -2), alpha = 0.25) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(1, 2), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(2, 3), alpha = 0.25)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm, size = 2) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.75) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, -1), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-3, -2), alpha = 0.25) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(1, 2), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(2, 3), alpha = 0.25)
ggplot(data.frame(x=c(-4.5, 4.5)), aes(x)) + stat_function(fun=dnorm, size = 1.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-1, 1), alpha = 0.75) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-2, -1), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(-3, -2), alpha = 0.25) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(1, 2), alpha = 0.5) +
geom_area(stat = "function", fun = dnorm, fill = "red", xlim = c(2, 3), alpha = 0.25)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
orders <- read.csv("orders.csv")
tot_orders <- group_by(orders_ext, id) %>% summarise(tot_orders =
n_distinct(ordnum)) %>% select(tot_orders)
library(dplyr)
library(lubridate)
library(ggplot2)
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
orders <- mutate(orders, orddate = dmy(orddate), category = factor(category))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("F:/MSIA/Winter 2018/MSiA 421 - Data Mining/kaggle")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
library(pROC)
orders <- read.csv("orders.csv")
booktrain <- read.csv("booktrain.csv")
# Chunk 3
dim(orders)
head(orders)
str(orders)
# Chunk 4
dim(booktrain)
head(booktrain)
str(booktrain)
# Chunk 5
orders <- mutate(orders, orddate = dmy(orddate), category = factor(category))
# Chunk 6
length(orders$id)
length(unique(orders$id))
length(booktrain$id)
length(unique(booktrain$id))
# Chunk 7
train <- filter(orders, id %in% booktrain$id)
test <- filter(orders, !(id %in% booktrain$id))
# Chunk 8
length(unique(train$id))
length(unique(test$id))
# Chunk 9
qplot(data = booktrain, x = logtarg)
# Chunk 10
length(which(booktrain$logtarg>0))
# Chunk 11
group_by(orders, id) %>% summarise(n = n_distinct(ordnum)) %>% arrange(desc(n))
# Chunk 12
naive_df_train <- group_by(train, id) %>%
summarise(tot_price = sum(price), tot_qty = sum(qty))
merged_train_naive = merge(naive_df_train, booktrain, by = 'id')
naive_df_test <- group_by(test, id) %>%
summarise(tot_price = sum(price), tot_qty = sum(qty))
# Chunk 13
naive_fit <- lm(logtarg ~ . -id, data = merged_train_naive)
summary(naive_fit)
# Chunk 14
pred <- predict(naive_fit, newdata = naive_df_test)
predictions <- data.frame(id = naive_df_test$id, yhat = pred)
write.csv(predictions, file = 'naive.csv', row.names = FALSE)
# Chunk 15
# removing zero priced purchases
# orders <- filter(orders, price != 0)
# Chunk 16
# total number of orders per id
tot_orders_df <- group_by(orders, id) %>% summarise(tot_orders =
n_distinct(ordnum))
# number of items purchased per order
avg_items_df <- group_by(orders, id) %>% summarise(avg_items = sum(qty)) %>%
mutate(avg_items = avg_items/tot_orders_df$tot_orders)
# average price per order
avg_price_df <- group_by(orders, id) %>% summarise(avg_price = sum(price)) %>%
mutate(avg_price = avg_price/tot_orders_df$tot_orders)
# total number of categories purchased
tot_cat_df <- group_by(orders, id) %>% summarise(tot_cat = n_distinct(category))
# Chunk 17
# first purchase date
first_pur_df = group_by(orders, id) %>% summarise(first_pur = min(orddate))
# last purchase date
last_pur_df = group_by(orders, id) %>% summarise(last_pur = max(orddate))
# total price of last purchase date
last_tot_price_df = group_by(orders, id, orddate) %>%
summarise(last_tot_price = sum(price)) %>%
group_by(id) %>%
filter(orddate == max(orddate)) %>%
select(id, last_tot_price)
# Chunk 18
# merging all features into temp df
temp_df <- Reduce(function(x, y) merge(x, y, by = "id"), list(tot_orders_df, avg_items_df, avg_price_df, tot_cat_df, first_pur_df, last_pur_df, last_tot_price_df))
# creating the following features
# 1. the average time between orders
# 2. activity defined as (lifetime - recency)/lifetime, which is the proportion of lifetime a customer was active
# 3. last order weighted by price
temp_df <- temp_df %>%
mutate(pur_time_avg = as.integer(last_pur - first_pur)/tot_orders) %>%
mutate(activity = as.integer(last_pur - first_pur)/
as.integer(as.Date("2014-08-01") - first_pur)) %>%
mutate(last_ord_wt = as.integer(as.Date("2014-08-01") - last_pur)*
last_tot_price)
# removing last_tot_price now that we have created last_ord_wt
temp_df <- select(temp_df, -last_tot_price)
temp_df <- mutate(temp_df, last_pur = as.integer(last_pur),
first_pur = as.integer(first_pur))
# Chunk 19
naive_features <- group_by(orders, id) %>%
summarise(tot_price = sum(price), tot_qty = sum(qty))
temp_df <- merge(temp_df, naive_features, by = 'id')
# Chunk 20
train_adv <- filter(temp_df, id %in% booktrain$id)
test_adv <- filter(temp_df, !(id %in% booktrain$id))
merged_train_adv <- merge(train_adv, booktrain, by = 'id')
write.csv(test_adv, "test_adv.csv")
